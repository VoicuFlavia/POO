#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>

//transmitere prin valoare, datele au acelasi tip ca in main
void interschimbare(int nr1,int nr2)
{
	int auxiliar;
	auxiliar = nr1;
	nr1 = nr2;
	nr2 = auxiliar;
}

void interschimbareprinAdresa(int *nr1, int *nr2)
{
	//dereferentiere prin *
	int auxiliar;
	auxiliar = *nr1;
	*nr1 = *nr2;
	*nr2 = auxiliar;
}

void citireDeLaTastatura(int** vector, int* dimensiune)// dimensiunea are* pt ca se actualizeaza si vector ** are una de la alocare dinamica si una ca se trimite prin pointer
{
	printf("Dimensiune: \n");
	scanf("&d", dimensiune); // scanf primeste adrese. Dimensiune este deja adresa deci nu mai are &, altfel puneam

	//alocare memorie
	*vector = (int*)malloc((*dimensiune) * sizeof(int));

	for (int i = 0; i < (*dimensiune); i++)
	{
		printf("\nVector [%d]: ", i);
		scanf("%d", &(*vector)[i]); //* dereferentiem(iau valoarea de pe pozitia i) si pentru ca scanf vrea adresa(&), ii dau adresa elementului i
	}
}

void afisareVector(int* vector, int dimensiune)
{
	for (int i = 0; i < dimensiune; i++)
	{
		printf("\nVector[%d]=%d ", i, vector[i]);
	}
}

int main()
{
	//tipuri de date	
	int numarIntreg;
	char caracter;
	float numarReal;
	numarIntreg = 7;
	caracter = 'A';
	numarReal = 70.5f;
	printf("%d \n", numarIntreg);
	printf("%c \n", caracter);
	printf("%d \n", caracter); //afiseaza codul ascii pt A
	printf("%.2f \n", numarReal); //.2 arata cate zecimale

	//siruri de caractere
	char sirCaractere[8];
	for (int i = 0; i < 8; i++)
	{
		sirCaractere[i] = 97 + i;
	}
	sirCaractere[7] = '\0';
	printf("%s", sirCaractere);

	//sir alocat dinamic
	char* sirAlocatDinamic;
	sirAlocatDinamic = (char*)malloc(6 * sizeof(char)); //dimensiunea se calculeaza ca nr de elemente * dimensiunea tipului
	for (int i = 0; i < 6; i++)
	{
		sirAlocatDinamic[i] = 65 + i;
	}
	sirAlocatDinamic[5] = '\0';
	printf("\n %s", sirAlocatDinamic);

	//trimiteam prin valoare, referinta sau adresa(pointer) in cazul C++
	//in cazul C avem transmitere prin valoare sau pointer
	
	//diferenta dintre metoda si functii
	//metodele sunt la nivelul claselor si le apelam pe obiecte

	//in C folosim functii

	//interschimbare
	int var1 = 1, var2 = 10;
	interschimbare(var1, var2);
	printf("\n var1=%d, var2=%d", var1, var2);
	
	//pun & ca sa iau adresa sa o transmit la pointeri
	interschimbareprinAdresa(&var1, &var2);
	printf("\n var1=%d, var2=%d", var1, var2);	

	//citirea si afisarea de la tastatura a vectorului
	int* vector;
	int dimensiuneVector;

	citireDeLaTastatura(&vector,&dimensiuneVector);
	afisareVector(vector, dimensiuneVector);


}
